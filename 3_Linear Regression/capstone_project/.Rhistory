m5 = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win +
audience_score + critics_score, data = movies2)
print('critics_score')
m6 = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win +
audience_score + runtime, data = movies2)
m1 = lm(imdb_rating ~ best_dir_win + best_actress_win +
audience_score + runtime + critics_score, data = movies2)
print('best_actor_win')
print(summary(m1)$adj.r.squared)
m2 = lm(imdb_rating ~ best_actor_win + best_actress_win +
audience_score + runtime + critics_score, data = movies2)
print('best_dir_win')
print(summary(m2)$adj.r.squared)
m3 = lm(imdb_rating ~ best_actor_win + best_dir_win +
audience_score + runtime + critics_score, data = movies2)
print('best_actress_win')
m4 = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win + runtime + critics_score, data = movies2)
print('audience_score')
print(summary(m4)$adj.r.squared)
m5 = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win +
audience_score + critics_score, data = movies2)
print('runtime')
print(summary(m5)$adj.r.squared)
m6 = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win +
audience_score + runtime, data = movies2)
print('critics_score')
print(summary(m6)$adj.r.squared)
print('initial')
print(summary(model)$adj.r.squared)
m1 = lm(imdb_rating ~ best_dir_win + best_actress_win +
audience_score + runtime + critics_score, data = movies2)
print('best_actor_win')
print(summary(m1)$adj.r.squared)
m2 = lm(imdb_rating ~ best_actor_win + best_actress_win +
audience_score + runtime + critics_score, data = movies2)
print('best_dir_win')
print(summary(m2)$adj.r.squared)
m3 = lm(imdb_rating ~ best_actor_win + best_dir_win +
audience_score + runtime + critics_score, data = movies2)
print('best_actress_win')
m4 = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win + runtime + critics_score, data = movies2)
print('audience_score')
print(summary(m4)$adj.r.squared)
m5 = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win +
audience_score + critics_score, data = movies2)
print('runtime')
print(summary(m5)$adj.r.squared)
m6 = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win +
audience_score + runtime, data = movies2)
print('critics_score')
print(summary(m6)$adj.r.squared)
m0 = lm(imdb_rating ~ best_actor_win + best_actress_win +
audience_score + runtime + critics_score, data = movies2)
print('initial')
print(summary(m0)$adj.r.squared)
m1 = lm(imdb_rating ~ best_actress_win +
audience_score + runtime + critics_score, data = movies2)
print('best_actor_win')
print(summary(m1)$adj.r.squared)
m2 = lm(imdb_rating ~ best_actor_win +
audience_score + runtime + critics_score, data = movies2)
print('best_actress_win')
print(summary(m2)$adj.r.squared)
m3 = lm(imdb_rating ~ best_actor_win + best_actress_win +
runtime + critics_score, data = movies2)
print('audience_score')
print(summary(m3)$adj.r.squared)
m4 = lm(imdb_rating ~ best_actor_win + best_actress_win +
audience_score + critics_score, data = movies2)
print('runtime')
print(summary(m4)$adj.r.squared)
m5 = lm(imdb_rating ~ best_actor_win + best_actress_win +
audience_score + runtime, data = movies2)
print('critics_score')
print(summary(m5)$adj.r.squared)
m0 = lm(imdb_rating ~ best_actress_win +
audience_score + runtime + critics_score, data = movies2)
print('initial')
print(summary(m0)$adj.r.squared)
m1 = lm(imdb_rating ~ audience_score + runtime + critics_score, data = movies2)
print('best_actress_win')
print(summary(m1)$adj.r.squared)
m2 = lm(imdb_rating ~ best_actress_win +
runtime + critics_score, data = movies2)
print('audience_score')
print(summary(m2)$adj.r.squared)
m3 = lm(imdb_rating ~ best_actress_win +
audience_score + critics_score, data = movies2)
print('runtime')
print(summary(m3)$adj.r.squared)
m4 = lm(imdb_rating ~ best_actress_win +
audience_score + runtime, data = movies2)
print('critics_score')
print(summary(m4)$adj.r.squared)
m0 = lm(imdb_rating ~ audience_score + runtime + critics_score, data = movies2)
print('initial')
print(summary(m0)$adj.r.squared)
m1 = lm(imdb_rating ~ runtime + critics_score, data = movies2)
print('audience_score')
print(summary(m1)$adj.r.squared)
m2 = lm(imdb_rating ~ audience_score + critics_score, data = movies2)
print('runtime')
print(summary(m2)$adj.r.squared)
m1 = lm(imdb_rating ~ audience_score + runtime, data = movies2)
print('critics_score')
print(summary(m1)$adj.r.squared)
m0 = lm(imdb_rating ~ audience_score + runtime + critics_score, data = movies2)
print('initial')
print(summary(m0)$adj.r.squared)
m1 = lm(imdb_rating ~ runtime + critics_score, data = movies2)
print('audience_score')
print(summary(m1)$adj.r.squared)
m2 = lm(imdb_rating ~ audience_score + critics_score, data = movies2)
print('runtime')
print(summary(m2)$adj.r.squared)
m3 = lm(imdb_rating ~ audience_score + runtime, data = movies2)
print('critics_score')
print(summary(m3)$adj.r.squared)
summary(m0)
# subset the `movies` data with the variables of interest
movies2 = data.frame(imdb_rating = movies$imdb_rating, best_actor_win = movies$best_actor_win, best_dir_win = movies$best_dir_win, best_actress_win = movies$best_actress_win, audience_score = movies$audience_score, runtime = movies$runtime, critics_score = movies$critics_score)
movies2 = movies2 %>% mutate(best_actor_win = ifelse(best_actor_win == 'yes', 1, 0))
# subset the `movies` data with the variables of interest
movies2 = data.frame(imdb_rating = movies$imdb_rating, best_actor_win = movies$best_actor_win, best_dir_win = movies$best_dir_win, best_actress_win = movies$best_actress_win, audience_score = movies$audience_score, runtime = movies$runtime, critics_score = movies$critics_score)
movies2 = movies2 %>% mutate(best_actor_win = ifelse(best_actor_win == 'yes', 1, 0))
library(ggplot2)
library(dplyr)
library(statsr)
install.packages("GGally")
library(GGally)
load("movies.rdata")
summary(movies$thtr_rel_year)
summary(movies$imdb_rating)
str(movies$imdb_rating)
ggplot(movies, aes(x = imdb_rating)) + geom_histogram(binwidth = .5)
summary(movies$audience_score)
str(movies$audience_score)
ggplot(movies, aes(x = audience_score)) + geom_histogram(binwidth = 10)
movies <- movies %>% mutate(imdb_rating_norm = imdb_rating / 10, audience_score_norm = audience_score / 100)
str(movies$imdb_rating_norm)
str(movies$audience_score_norm)
ggplot(movies, aes(x = audience_score_norm, y = imdb_rating_norm)) + geom_jitter()
cor(movies$imdb_rating_norm, movies$audience_score_norm)
ggplot(movies, aes(x = imdb_rating_norm, y = audience_score_norm)) + geom_jitter() + geom_smooth(method = "lm")
md <- lm(audience_score_norm ~ imdb_rating_norm, data = movies)
plot(md$residuals ~ movies$audience_score_norm) # linear assosiation = random scatter
plot(md$residuals ~ md$fitted)
plot(abs(md$residuals) ~ md$fit)
hist(md$residuals)
qqnorm(md$residuals); qqline(md$residuals)
plot(md$residuals)
# subset the `movies` data with the variables of interest
movies2 = data.frame(imdb_rating = movies$imdb_rating, best_actor_win = movies$best_actor_win, best_dir_win = movies$best_dir_win, best_actress_win = movies$best_actress_win, audience_score = movies$audience_score, runtime = movies$runtime, critics_score = movies$critics_score)
movies2 = movies2 %>% mutate(best_actor_win = ifelse(best_actor_win == 'yes', 1, 0))
movies2 = movies2 %>% mutate(best_actress_win = ifelse(best_actress_win == 'yes', 1, 0))
movies2 = movies2 %>% mutate(best_dir_win = ifelse(best_dir_win == 'yes', 1, 0))
ggpairs(movies2)
library(ggplot2)
library(dplyr)
library(statsr)
install.packages("GGally")
library(GGally)
load("movies.rdata")
summary(movies$thtr_rel_year)
summary(movies$imdb_rating)
str(movies$imdb_rating)
ggplot(movies, aes(x = imdb_rating)) + geom_histogram(binwidth = .5)
summary(movies$audience_score)
str(movies$audience_score)
ggplot(movies, aes(x = audience_score)) + geom_histogram(binwidth = 10)
movies <- movies %>% mutate(imdb_rating_norm = imdb_rating / 10, audience_score_norm = audience_score / 100)
str(movies$imdb_rating_norm)
str(movies$audience_score_norm)
ggplot(movies, aes(x = audience_score_norm, y = imdb_rating_norm)) + geom_jitter()
cor(movies$imdb_rating_norm, movies$audience_score_norm)
ggplot(movies, aes(x = imdb_rating_norm, y = audience_score_norm)) + geom_jitter() + geom_smooth(method = "lm")
md <- lm(audience_score_norm ~ imdb_rating_norm, data = movies)
plot(md$residuals ~ movies$audience_score_norm) # linear assosiation = random scatter
plot(md$residuals ~ md$fitted)
plot(abs(md$residuals) ~ md$fit)
hist(md$residuals)
qqnorm(md$residuals); qqline(md$residuals)
plot(md$residuals)
# subset the `movies` data with the variables of interest
movies2 = data.frame(imdb_rating = movies$imdb_rating, best_actor_win = movies$best_actor_win, best_dir_win = movies$best_dir_win, best_actress_win = movies$best_actress_win, audience_score = movies$audience_score, runtime = movies$runtime, critics_score = movies$critics_score)
movies2 = movies2 %>% mutate(best_actor_win = ifelse(best_actor_win == 'yes', 1, 0))
movies2 = movies2 %>% mutate(best_actress_win = ifelse(best_actress_win == 'yes', 1, 0))
movies2 = movies2 %>% mutate(best_dir_win = ifelse(best_dir_win == 'yes', 1, 0))
ggpairs(movies2)
install.packages("GGally")
summary(m0)
qt(0.025, df = 647)
abs(qt(0.025, df = 647))
ME = abs(qt(0.025, df = 647)) * 0.0013129
b = 0.0340659
[b - ME, b - ME]
ME = abs(qt(0.025, df = 647)) * 0.0013129
b = 0.0340659
(b - ME, b + ME)
ME = abs(qt(0.025, df = 647)) * 0.0013129
b = 0.0340659
(b - ME; b + ME)
ME = abs(qt(0.025, df = 647)) * 0.0013129
b = 0.0340659
[b - ME; b + ME]
ME = abs(qt(0.025, df = 647)) * 0.0013129
b = 0.0340659
print(b - ME, b + ME)
ME = abs(qt(0.025, df = 647)) * 0.0013129
b = 0.0340659
print(ME)
print(b - ME)
print(b + ME)
ME = abs(qt(0.025, df = 647)) * 0.0013129
b = 0.0340659
print(ME)
print(b - ME + "" + b + ME)
ME = abs(qt(0.025, df = 647)) * 0.0013129
b = 0.0340659
print(ME)
print(b - ME + "" + strint(b + ME))
ME = abs(qt(0.025, df = 647)) * 0.0013129
b = 0.0340659
print(ME)
print(b - ME + "" + string(b + ME))
ME = abs(qt(0.025, df = 647)) * 0.0013129
b = 0.0340659
print(ME)
print(b - ME + "" + STRING(b + ME))
ME = abs(qt(0.025, df = 647)) * 0.0013129
b = 0.0340659
print(b - ME)
print(b + ME)
ME = abs(qt(0.025, df = 647)) * 0.0009848
b = 0.0056647
print(b - ME)
print(b + ME)
ME = abs(qt(0.025, df = 647)) * 0.0009336
b = 0.0114496
print(b - ME)
print(b + ME)
# subset the `movies` data with the variables of interest
movies2 = data.frame(imdb_rating = movies$imdb_rating, best_actor_win = movies$best_actor_win, best_dir_win = movies$best_dir_win, best_actress_win = movies$best_actress_win, audience_score = movies$audience_score, runtime = movies$runtime, critics_score = movies$critics_score)
movies2 = movies2 %>% mutate(best_actor_win = ifelse(best_actor_win == 'yes', 1, 0))
library(ggplot2)
library(dplyr)
library(statsr)
install.packages("GGally")
library(GGally)
load("movies.rdata")
summary(movies$thtr_rel_year)
summary(movies$imdb_rating)
str(movies$imdb_rating)
ggplot(movies, aes(x = imdb_rating)) + geom_histogram(binwidth = .5)
summary(movies$audience_score)
str(movies$audience_score)
ggplot(movies, aes(x = audience_score)) + geom_histogram(binwidth = 10)
movies <- movies %>% mutate(imdb_rating_norm = imdb_rating / 10, audience_score_norm = audience_score / 100)
str(movies$imdb_rating_norm)
str(movies$audience_score_norm)
ggplot(movies, aes(x = audience_score_norm, y = imdb_rating_norm)) + geom_jitter()
cor(movies$imdb_rating_norm, movies$audience_score_norm)
ggplot(movies, aes(x = imdb_rating_norm, y = audience_score_norm)) + geom_jitter() + geom_smooth(method = "lm")
md <- lm(audience_score_norm ~ imdb_rating_norm, data = movies)
plot(md$residuals ~ movies$audience_score_norm) # linear assosiation = random scatter
plot(md$residuals ~ md$fitted)
plot(abs(md$residuals) ~ md$fit)
hist(md$residuals)
qqnorm(md$residuals); qqline(md$residuals)
plot(md$residuals)
# subset the `movies` data with the variables of interest
movies2 = data.frame(imdb_rating = movies$imdb_rating, best_actor_win = movies$best_actor_win, best_dir_win = movies$best_dir_win, best_actress_win = movies$best_actress_win, audience_score = movies$audience_score, runtime = movies$runtime, critics_score = movies$critics_score)
movies2 = movies2 %>% mutate(best_actor_win = ifelse(best_actor_win == 'yes', 1, 0))
movies2 = movies2 %>% mutate(best_actress_win = ifelse(best_actress_win == 'yes', 1, 0))
movies2 = movies2 %>% mutate(best_dir_win = ifelse(best_dir_win == 'yes', 1, 0))
ggpairs(movies2)
model = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win + audience_score + runtime + critics_score, data = movies2)
summary(model)
ggplot(movies, aes(x = runtime, y = imdb_rating_norm)) + geom_jitter()
cor(movies$imdb_rating_norm, movies$audience_score_norm)
cor(movies$imdb_rating, movies$audience_score)
cor(movies$imdb_rating, movies$rating)
cor(movies$imdb_rating, movies$runtime)
cor(movies$imdb_rating, movies$runtime)
library(ggplot2)
library(dplyr)
library(statsr)
install.packages("GGally")
library(GGally)
load("movies.rdata")
summary(movies$thtr_rel_year)
summary(movies$imdb_rating)
str(movies$imdb_rating)
ggplot(movies, aes(x = imdb_rating)) + geom_histogram(binwidth = .5)
summary(movies$audience_score)
str(movies$audience_score)
ggplot(movies, aes(x = audience_score)) + geom_histogram(binwidth = 10)
# subset the `movies` data with the variables of interest
movies2 = data.frame(imdb_rating = movies$imdb_rating, best_actor_win = movies$best_actor_win, best_dir_win = movies$best_dir_win, best_actress_win = movies$best_actress_win, audience_score = movies$audience_score, runtime = movies$runtime, critics_score = movies$critics_score)
movies2 = movies2 %>% mutate(best_actor_win = ifelse(best_actor_win == 'yes', 1, 0))
movies2 = movies2 %>% mutate(best_actress_win = ifelse(best_actress_win == 'yes', 1, 0))
movies2 = movies2 %>% mutate(best_dir_win = ifelse(best_dir_win == 'yes', 1, 0))
ggpairs(movies2)
install.packages("GGally")
cor(movies$imdb_rating, movies$runtime)
movies = movies %>% filter(!is.na(runtime))
library(ggplot2)
library(dplyr)
library(statsr)
install.packages("GGally")
library(GGally)
load("movies.rdata")
summary(movies$thtr_rel_year)
summary(movies$imdb_rating)
str(movies$imdb_rating)
ggplot(movies, aes(x = imdb_rating)) + geom_histogram(binwidth = .5)
summary(movies$audience_score)
str(movies$audience_score)
ggplot(movies, aes(x = audience_score)) + geom_histogram(binwidth = 10)
# subset the `movies` data with the variables of interest
movies2 = data.frame(imdb_rating = movies$imdb_rating, best_actor_win = movies$best_actor_win, best_dir_win = movies$best_dir_win, best_actress_win = movies$best_actress_win, audience_score = movies$audience_score, runtime = movies$runtime, critics_score = movies$critics_score)
movies2 = movies2 %>% mutate(best_actor_win = ifelse(best_actor_win == 'yes', 1, 0))
movies2 = movies2 %>% mutate(best_actress_win = ifelse(best_actress_win == 'yes', 1, 0))
movies2 = movies2 %>% mutate(best_dir_win = ifelse(best_dir_win == 'yes', 1, 0))
ggpairs(movies2)
model = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win + audience_score + runtime + critics_score, data = movies2)
summary(model)
print('initial')
print(summary(model)$adj.r.squared)
m1 = lm(imdb_rating ~ best_dir_win + best_actress_win +
audience_score + runtime + critics_score, data = movies2)
print('best_actor_win')
print(summary(m1)$adj.r.squared)
m2 = lm(imdb_rating ~ best_actor_win + best_actress_win +
audience_score + runtime + critics_score, data = movies2)
print('best_dir_win')
print(summary(m2)$adj.r.squared)
m3 = lm(imdb_rating ~ best_actor_win + best_dir_win +
audience_score + runtime + critics_score, data = movies2)
print('best_actress_win')
m4 = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win + runtime + critics_score, data = movies2)
print('audience_score')
print(summary(m4)$adj.r.squared)
m5 = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win +
audience_score + critics_score, data = movies2)
print('runtime')
print(summary(m5)$adj.r.squared)
m6 = lm(imdb_rating ~ best_actor_win + best_dir_win + best_actress_win +
audience_score + runtime, data = movies2)
print('critics_score')
print(summary(m6)$adj.r.squared)
m0 = lm(imdb_rating ~ best_actor_win + best_actress_win +
audience_score + runtime + critics_score, data = movies2)
print('initial')
print(summary(m0)$adj.r.squared)
m1 = lm(imdb_rating ~ best_actress_win +
audience_score + runtime + critics_score, data = movies2)
print('best_actor_win')
print(summary(m1)$adj.r.squared)
m2 = lm(imdb_rating ~ best_actor_win +
audience_score + runtime + critics_score, data = movies2)
print('best_actress_win')
print(summary(m2)$adj.r.squared)
m3 = lm(imdb_rating ~ best_actor_win + best_actress_win +
runtime + critics_score, data = movies2)
print('audience_score')
print(summary(m3)$adj.r.squared)
m4 = lm(imdb_rating ~ best_actor_win + best_actress_win +
audience_score + critics_score, data = movies2)
print('runtime')
print(summary(m4)$adj.r.squared)
m5 = lm(imdb_rating ~ best_actor_win + best_actress_win +
audience_score + runtime, data = movies2)
print('critics_score')
print(summary(m5)$adj.r.squared)
m0 = lm(imdb_rating ~ best_actress_win +
audience_score + runtime + critics_score, data = movies2)
print('initial')
print(summary(m0)$adj.r.squared)
m1 = lm(imdb_rating ~ audience_score + runtime + critics_score, data = movies2)
print('best_actress_win')
print(summary(m1)$adj.r.squared)
m2 = lm(imdb_rating ~ best_actress_win +
runtime + critics_score, data = movies2)
print('audience_score')
print(summary(m2)$adj.r.squared)
m3 = lm(imdb_rating ~ best_actress_win +
audience_score + critics_score, data = movies2)
print('runtime')
print(summary(m3)$adj.r.squared)
m4 = lm(imdb_rating ~ best_actress_win +
audience_score + runtime, data = movies2)
print('critics_score')
print(summary(m4)$adj.r.squared)
m0 = lm(imdb_rating ~ audience_score + runtime + critics_score, data = movies2)
print('initial')
print(summary(m0)$adj.r.squared)
m1 = lm(imdb_rating ~ runtime + critics_score, data = movies2)
print('audience_score')
print(summary(m1)$adj.r.squared)
m2 = lm(imdb_rating ~ audience_score + critics_score, data = movies2)
print('runtime')
print(summary(m2)$adj.r.squared)
m3 = lm(imdb_rating ~ audience_score + runtime, data = movies2)
print('critics_score')
print(summary(m3)$adj.r.squared)
summary(m0)
abs(qt(0.025, df = 647))
ME = abs(qt(0.025, df = 647)) * 0.0013129
b = 0.0340659
print(b - ME)
print(b + ME)
ME = abs(qt(0.025, df = 647)) * 0.0009848
b = 0.0056647
print(b - ME)
print(b + ME)
ME = abs(qt(0.025, df = 647)) * 0.0009336
b = 0.0114496
print(b - ME)
print(b + ME)
ggplot(movies, aes(x = audience_score_norm, y = imdb_rating_norm)) + geom_jitter()
movies = movies %>% filter(!is.na(runtime))
cor(movies$imdb_rating, movies$runtime)
movies = movies %>% filter(!is.na(runtime))
movies
cor(movies$imdb_rating, movies$runtime)
movies = movies %>% filter(!is.na(runtime))
cor(movies$imdb_rating, movies$runtime)
ggplot(movies, aes(x = audience_score_norm, y = imdb_rating_norm)) + geom_jitter()
ggplot(movies, aes(x = audience_score, y = imdb_rating)) + geom_jitter()
ggplot(movies, aes(x = imdb_rating_norm, y = audience_score_norm)) + geom_jitter() + geom_smooth(method = "lm")
ggplot(movies, aes(x = imdb_rating, y = audience_score)) + geom_jitter() + geom_smooth(method = "lm")
plot(m0$residuals ~ movies$audience_score) # linear assosiation = random scatter
plot(md$residuals ~ md$fitted)
plot(abs(md$residuals) ~ md$fit)
plot(m0$residuals ~ m0$fitted)
plot(abs(m0$residuals) ~ m0$fit)
plot(md$residuals)
hist(md$residuals)
qqnorm(md$residuals); qqline(md$residuals)
plot(md$residuals)
ggplot(movies, aes(x = audience_score, y = imdb_rating)) + geom_jitter()
cor(movies$imdb_rating, movies$audience_score)
ggplot(movies, aes(x = runtime, y = imdb_rating)) + geom_jitter()
ggplot(movies, aes(x = imdb_rating, y = runtime)) + geom_jitter() + geom_smooth(method = "lm")
plot(m0$residuals ~ movies$audience_score) # linear assosiation = random scatter
plot(m0$residuals ~ m0$fitted)
plot(abs(m0$residuals) ~ m0$fit)
hist(md$residuals)
qqnorm(md$residuals); qqline(md$residuals)
ggplot(movies, aes(x = imdb_rating, y = runtime)) + geom_jitter() + geom_smooth(method = "lm")
plot(m0$residuals ~ movies$rating) # linear assosiation = random scatter
ggplot(movies, aes(x = imdb_rating, y = runtime)) + geom_jitter() + geom_smooth(method = "lm")
plot(m0$residuals ~ movies$runtime) # linear assosiation = random scatter
ggplot(movies, aes(x = imdb_rating, y = critics_score)) + geom_jitter() + geom_smooth(method = "lm")
plot(m0$residuals ~ movies$critics_score) # linear assosiation = random scatter
ggplot(movies, aes(x = imdb_rating, y = runtime)) + geom_jitter() + geom_smooth(method = "lm")
plot(m0$residuals ~ movies$runtime) # linear assosiation = random scatter
predict = function(audienceScore, runtime, criticsScore) {
# intercept + b1*audience_score + b2*runtime + b3*critics_score;
return 3.1080482 + 0.0340659*audienceScore + 0.0056647*runtime + 0.0114496*criticsScore;
predict = function(audienceScore, runtime, criticsScore) {
# intercept + b1*audience_score + b2*runtime + b3*critics_score;
yhat = 3.1080482 + 0.0340659*audienceScore + 0.0056647*runtime + 0.0114496*criticsScore;
return yhat;
predict = function(audienceScore, runtime, criticsScore) {
# intercept + b1*audience_score + b2*runtime + b3*critics_score;
yhat = 3.1080482 + 0.0340659*audienceScore + 0.0056647*runtime + 0.0114496*criticsScore
return yhat
predictFunction <- function(audienceScore, runtime, criticsScore) {
# intercept + b1*audience_score + b2*runtime + b3*critics_score;
yhat = 3.1080482 + 0.0340659*audienceScore + 0.0056647*runtime + 0.0114496*criticsScore
return yhat
predictFunction <- function(audienceScore, runtime, criticsScore) {
# intercept + b1*audience_score + b2*runtime + b3*critics_score;
yhat = 3.1080482 + 0.0340659*audienceScore + 0.0056647*runtime + 0.0114496*criticsScore
return yhat
predictFunction <- function(audienceScore, runtime, criticsScore) {
# intercept + b1*audience_score + b2*runtime + b3*critics_score;
yhat <- 3.1080482 + 0.0340659*audienceScore + 0.0056647*runtime + 0.0114496*criticsScore
return yhat
predictFunction <- function(audienceScore, runtime, criticsScore) {
# intercept + b1*audience_score + b2*runtime + b3*critics_score;
yhat = 3.1080482 + 0.0340659*audienceScore + 0.0056647*runtime + 0.0114496*criticsScore
return yhat
predictFunction <- function(audienceScore, runtime, criticsScore) {
# intercept + b1*audience_score + b2*runtime + b3*critics_score;
yhat = 3.1080482 + (0.0340659*audienceScore) + (0.0056647*runtime) + (0.0114496*criticsScore)
return yhat
predictFunction <- function(audienceScore, runtime, criticsScore) {
# intercept + b1*audience_score + b2*runtime + b3*critics_score;
yhat = 3.1080482 + (0.0340659*audienceScore) + (0.0056647*runtime) + (0.0114496*criticsScore)
return yhat;
predictFunction <- function(audienceScore, runtime, criticsScore) {
# intercept + b1*audience_score + b2*runtime + b3*critics_score;
yhat = 3.1080482 + (0.0340659*audienceScore) + (0.0056647*runtime) + (0.0114496*criticsScore)
return yhat;
predictFunction <- function(audienceScore, runtime, criticsScore) {
# intercept + b1*audience_score + b2*runtime + b3*critics_score;
yhat = 3.1080482 + (0.0340659*audienceScore) + (0.0056647*runtime) + (0.0114496*criticsScore)
return(yhat)
}
predictFunction = function(audienceScore, runtime, criticsScore) {
# intercept + b1*audience_score + b2*runtime + b3*critics_score;
yhat = 3.1080482 + (0.0340659*audienceScore) + (0.0056647*runtime) + (0.0114496*criticsScore)
return(yhat)
}
predict
newdata = data.frame(audience_score=80, runtime = 100, critics_score = 90)
predict(m0, newdata, interval="predict")
newdata = data.frame(audience_score=95, runtime = 180, critics_score = 96)
predict(m0, newdata, interval="predict")
